<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
typedef struct{
 	int id;
	bool job;
	clock timeInQueue
}Sample;
const int N = 26; //Max 26 samples in queue

Sample QueueToRobotSample; 

chan IncomingSample;
chan BrakeToQueue;
chan QueueToRobot;
chan QueueToJob;
chan JobToQueue;
chan RobotToScanner;
chan RobotToQueue;
chan ScannerToQueue;
chan ScannerToRobot;

</declaration><template><name x="5" y="5">Input System</name><declaration>// Place local declarations here.
</declaration><location id="id0" x="16" y="-40"></location><init ref="id0"/></template><template><name>Brake System</name><location id="id1" x="0" y="0"></location><init ref="id1"/></template><template><name>QueueSystem</name><declaration>Sample list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void enqueue(Sample element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
Sample front()
{
   return list[0];
}

// Returns the last element of the queue
Sample tail()
{
   return list[len - 1];
}</declaration><location id="id2" x="-96" y="-112"><name x="-80" y="-136">SampleToRobot</name></location><location id="id3" x="24" y="-272"><name x="40" y="-296">SampleToJobSystem</name></location><location id="id4" x="-8" y="-192"><name x="0" y="-224">JobReceived</name></location><location id="id5" x="-344" y="-312"><name x="-440" y="-344">IdentifySample</name></location><location id="id6" x="-32" y="-360"><name x="-24" y="-392">Reject</name></location><location id="id7" x="-288" y="-176"><name x="-280" y="-168">QueueUp</name></location><location id="id8" x="-160" y="-304"><name x="-184" y="-352">Ready</name></location><init ref="id8"/><transition><source ref="id2"/><target ref="id8"/><nail x="-128" y="-152"/><nail x="-152" y="-264"/></transition><transition><source ref="id8"/><target ref="id2"/><label kind="synchronisation" x="-88" y="-168">QueueToRobot!</label><nail x="-128" y="-256"/><nail x="-96" y="-152"/></transition><transition><source ref="id4"/><target ref="id8"/><nail x="-64" y="-216"/></transition><transition><source ref="id8"/><target ref="id4"/><label kind="synchronisation" x="-32" y="-248">JobToQueue?</label><nail x="-40" y="-240"/></transition><transition><source ref="id3"/><target ref="id8"/><nail x="-40" y="-264"/><nail x="-88" y="-280"/></transition><transition><source ref="id8"/><target ref="id3"/><label kind="synchronisation" x="-32" y="-320">QueueToJob!</label><nail x="-104" y="-304"/><nail x="-40" y="-296"/></transition><transition><source ref="id7"/><target ref="id8"/><nail x="-264" y="-232"/><nail x="-232" y="-248"/></transition><transition><source ref="id5"/><target ref="id8"/><nail x="-296" y="-296"/><nail x="-192" y="-296"/></transition><transition><source ref="id8"/><target ref="id5"/><label kind="synchronisation" x="-312" y="-352">ScannerToQueue?</label><nail x="-192" y="-328"/><nail x="-296" y="-328"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="-240" y="-200">BrakeToQueue?</label><nail x="-192" y="-248"/><nail x="-224" y="-208"/></transition><transition><source ref="id6"/><target ref="id8"/><nail x="-48" y="-384"/><nail x="-72" y="-384"/><nail x="-96" y="-376"/><nail x="-128" y="-360"/></transition><transition><source ref="id8"/><target ref="id6"/></transition></template><template><name>Robot System</name><location id="id9" x="0" y="0"></location><init ref="id9"/></template><template><name>Scanner System</name><location id="id10" x="0" y="0"></location><init ref="id10"/></template><template><name>Job System</name><location id="id11" x="0" y="0"></location><init ref="id11"/></template><system>// Place template instantiations here.
Process = Template();

// List one or more processes to be composed into a system.
system Process;</system></nta>