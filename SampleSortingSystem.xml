<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
int count = 0;


int sorted = 0;
int rejected = 0;

typedef struct{
 	int id;
	bool job;
	bool scanned;
    bool validID;
    bool real;
}Sample;


const int N = 26; //Max 26 samples in queue

Sample QueueToRobotSample; 

Sample IncomingSample;


chan InputToBrake;
chan BrakeToQueue;
chan QueueToRobot;
chan QueueToJob;
chan JobToQueue;
chan RobotToScanner;
chan RobotToQueue;
chan RobotToJob;
chan JobToRobot;
chan ScannerToQueue;
chan ScannerToRobot;

Sample ScannerSample;
Sample InputSample;
Sample BrakeSample;
Sample QueueSample;
Sample RobotSample;
Sample JobSample;
</declaration>
	<template>
		<name>ScannerSystem</name>
		<declaration>chan Validate;

void ValidateSampleID(){
    double x = random(100);
	ScannerSample.validID = (x &gt; 50);
    ScannerSample.scanned = true;
    
}
</declaration>
		<location id="id0" x="25" y="-25">
			<name x="42" y="-51">ValidateSample</name>
			<committed/>
		</location>
		<location id="id1" x="-161" y="-25">
			<name x="-209" y="-65">SampleReady</name>
			<committed/>
		</location>
		<location id="id2" x="-415" y="-25">
			<name x="-559" y="-41">WaitingForSample</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-297" y="-178">ScannerSample.scanned == true</label>
			<label kind="synchronisation" x="-254" y="-161">ScannerToRobot!</label>
			<nail x="25" y="-136"/>
			<nail x="-416" y="-136"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-136" y="-8">ValidateSampleID()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-391" y="-57">RobotToScanner?</label>
			<label kind="assignment" x="-399" y="-8">ScannerSample = RobotSample</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">InputSystem</name>
		<declaration>// Place local declarations here.
clock x;

Sample create() {
	Sample s1 = {count, false, false, false, true};
	return s1;
}

</declaration>
		<location id="id3" x="-994" y="-399">
			<name x="-1090" y="-407">SampleSend</name>
			<committed/>
		</location>
		<location id="id4" x="-994" y="-552">
			<name x="-1074" y="-576">InitSample</name>
			<label kind="invariant" x="-1084" y="-560">x&lt;=20000</label>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<nail x="-864" y="-400"/>
			<nail x="-864" y="-400"/>
			<nail x="-864" y="-552"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-1144" y="-488">x&gt;=20000</label>
			<label kind="synchronisation" x="-1144" y="-504">InputToBrake!</label>
			<label kind="assignment" x="-1144" y="-472">x=0,
InputSample = create()</label>
		</transition>
	</template>
	<template>
		<name>BrakeSystem</name>
		<declaration>clock SampleBrake;
Sample CurrentSample;</declaration>
		<location id="id5" x="-272" y="-456">
			<name x="-282" y="-486">Error</name>
			<label kind="comments" x="-263" y="-416">Human intervention required</label>
		</location>
		<location id="id6" x="-272" y="-152">
			<name x="-256" y="-160">SampleInserted</name>
			<committed/>
		</location>
		<location id="id7" x="-272" y="-306">
			<name x="-264" y="-338">Brake</name>
			<label kind="invariant" x="-255" y="-314">SampleBrake &lt;= 1001</label>
		</location>
		<location id="id8" x="-720" y="-304">
			<name x="-768" y="-312">Start</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<nail x="-720" y="-152"/>
			<nail x="-720" y="-152"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="guard" x="-263" y="-391">SampleBrake &gt; 1000</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-263" y="-255">SampleBrake &lt;= 1000</label>
			<label kind="synchronisation" x="-263" y="-238">BrakeToQueue!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-560" y="-336">InputToBrake?</label>
			<label kind="assignment" x="-560" y="-368">SampleBrake = 0,
BrakeSample = InputSample</label>
		</transition>
	</template>
	<template>
		<name>QueueSystem</name>
		<declaration>Sample list[N+1];
clock shiftTimer;

// Shift Queue
void shift()
{
    int i = N;
    while(i &gt; 0)
    {
        if (i == N &amp;&amp; list[i].real == true)
        {
            rejected += 1;
        }
        list[i] = list[i - 1];

        i--;
    }
    list[0].real = false;
}


// Put an element at the end of the queue
void enqueue(Sample element)
{
    element.real = true;
    list[0] = element;
    shift();
}

// Returns the front element of the queue
Sample next()
{
    int i = N;
    Sample nextSample;

    while(i &gt;= 0)
    {
        if (list[i].real == true)
        {
          nextSample = list[i];  
        }
        i--;
    }
    return nextSample;
}

// Remove the front element of the queue
Sample dequeue()
{
    int i = N;
	Sample frontSample;
    while(i &gt;= 0)
    {
        if (list[i].real == true)
        {
            list[i].real = false;
            frontSample = list[i];
        }
        i--;
    }
	return frontSample;
}

int length()
{
    int i = N;
    int _len = 0;
    while(i &gt;= 0)
    {
        if (list[i].real == true)
        {
            _len++;
        }
        i--;
    }
    return _len;
}


</declaration>
		<location id="id9" x="-34" y="-17">
			<name x="-59" y="0">SampleToRobot</name>
			<committed/>
		</location>
		<location id="id10" x="212" y="-501">
			<name x="229" y="-510">SampleToJobSystem</name>
			<committed/>
		</location>
		<location id="id11" x="212" y="-229">
			<name x="234" y="-227">JobReceived</name>
			<committed/>
		</location>
		<location id="id12" x="-136" y="-612">
			<name x="-161" y="-654">Shift</name>
			<committed/>
		</location>
		<location id="id13" x="-391" y="-136">
			<name x="-484" y="-136">QueueUp</name>
			<committed/>
		</location>
		<location id="id14" x="-144" y="-312">
			<name x="-153" y="-365">Ready</name>
			<label kind="invariant" x="-289" y="-323">shiftTimer &lt;= 5000</label>
		</location>
		<location id="id15" x="-425" y="-493">
			<name x="-435" y="-527">SampleReturned</name>
			<committed/>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<nail x="-289" y="-476"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-501" y="-442">RobotToQueue?</label>
			<label kind="assignment" x="-527" y="-425">enqueue(RobotSample)</label>
			<nail x="-348" y="-391"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<nail x="-144" y="-127"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="guard" x="-17" y="-144">length() &gt; 0 &amp;&amp; (next().scanned == false || next().job == true)</label>
			<label kind="synchronisation" x="-17" y="-119">QueueToRobot!</label>
			<label kind="assignment" x="-17" y="-93">QueueSample = dequeue()</label>
			<nail x="-25" y="-170"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<nail x="85" y="-221"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="153" y="-314">JobToQueue?</label>
			<label kind="assignment" x="153" y="-297">enqueue(JobSample)</label>
			<nail x="102" y="-306"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id14"/>
			<nail x="144" y="-382"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id10"/>
			<label kind="guard" x="42" y="-586">next().scanned == true &amp;&amp; next().job == false</label>
			<label kind="synchronisation" x="42" y="-569">QueueToJob!</label>
			<label kind="assignment" x="42" y="-552">QueueSample = dequeue()</label>
			<nail x="51" y="-484"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<nail x="-357" y="-238"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-348" y="-144">BrakeToQueue?</label>
			<label kind="assignment" x="-357" y="-127">enqueue(BrakeSample)</label>
			<nail x="-255" y="-170"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="assignment" x="-280" y="-569">shiftTimer = 0</label>
			<nail x="-195" y="-510"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-76" y="-501">shiftTimer &gt;= 5000</label>
			<label kind="assignment" x="-76" y="-484">shift()</label>
			<nail x="-76" y="-501"/>
		</transition>
	</template>
	<template>
		<name>RobotSystem</name>
		<declaration>clock JobWaitingTime;</declaration>
		<location id="id16" x="-1427" y="-1062">
			<name x="-1487" y="-1121">isJobAvailable</name>
			<label kind="invariant" x="-1504" y="-1104">JobWaitingTime &lt; 3000</label>
		</location>
		<location id="id17" x="-475" y="-1062">
			<name x="-501" y="-1045">SampleProvided</name>
		</location>
		<location id="id18" x="-916" y="-1057">
			<name x="-892" y="-1045">SamplePicked</name>
		</location>
		<location id="id19" x="-909" y="-866">
			<name x="-1036" y="-858">WaitingForSample</name>
		</location>
		<location id="id20" x="-1427" y="-866">
			<name x="-1410" y="-858">RobotHandledSample</name>
		</location>
		<location id="id21" x="-1512" y="-968">
			<name x="-1657" y="-977">JobSystemTooSlow</name>
		</location>
		<location id="id22" x="-849" y="-968">
			<name x="-832" y="-977">SampleIDInvalid</name>
		</location>
		<location id="id23" x="-1096" y="-1283">
			<name x="-1283" y="-1291">SampleSortedFromQueue</name>
			<committed/>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id23"/>
			<target ref="id19"/>
			<label kind="assignment" x="-594" y="-892">sorted += 1</label>
			<nail x="-1096" y="-1317"/>
			<nail x="-390" y="-1317"/>
			<nail x="-390" y="-866"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id23"/>
			<label kind="guard" x="-1045" y="-1308">RobotSample.validID == true 
&amp;&amp; RobotSample.scanned == true
&amp;&amp; RobotSample.job == true</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="assignment" x="-879" y="-917">rejected += 1</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id22"/>
			<label kind="guard" x="-798" y="-1028">RobotSample.scanned == true 
&amp;&amp; RobotSample.validID == false</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1597" y="-934">JobToRobot?</label>
			<label kind="assignment" x="-1631" y="-917">RobotSample.job = false</label>
			<label kind="comments" x="-1665" y="-892">Waiting for the Job system
to recover. (Avoid Deadlock)</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id21"/>
			<label kind="guard" x="-1640" y="-1028">JobWaitingTime &gt;= 3000</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-1266" y="-909">RobotSample.job == false</label>
			<label kind="synchronisation" x="-1240" y="-892">RobotToQueue!</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-1266" y="-832">RobotSample.job == true</label>
			<label kind="assignment" x="-1215" y="-815">sorted += 1</label>
			<nail x="-1427" y="-790"/>
			<nail x="-909" y="-790"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1419" y="-1036">JobToRobot?</label>
			<label kind="assignment" x="-1410" y="-1002">RobotSample = JobSample</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-730" y="-1249">ScannerToRobot?</label>
			<label kind="assignment" x="-790" y="-1215">RobotSample = ScannerSample</label>
			<nail x="-475" y="-1223"/>
			<nail x="-917" y="-1223"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-1266" y="-1147">RobotSample.validID == true 
&amp;&amp; RobotSample.scanned == true
&amp;&amp; RobotSample.job == false</label>
			<label kind="synchronisation" x="-1232" y="-1172">RobotToJob!</label>
			<label kind="assignment" x="-1240" y="-1087">JobWaitingTime = 0</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-858" y="-1097">RobotSample.scanned == false</label>
			<label kind="synchronisation" x="-756" y="-1113">RobotToScanner!</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-1113" y="-1019">QueueToRobot?</label>
			<label kind="assignment" x="-1155" y="-1002">RobotSample = QueueSample</label>
			<nail x="-968" y="-968"/>
		</transition>
	</template>
	<template>
		<name>JobSystem</name>
		<declaration>
bool FromQueue;
bool FromRobot;

void CheckJob(){
    double rnd = random(100);
	JobSample.job = (rnd &gt; 50);
    
}</declaration>
		<location id="id24" x="1037" y="-17">
			<name x="1062" y="-25">JobSent</name>
			<committed/>
		</location>
		<location id="id25" x="484" y="-51">
			<name x="450" y="-93">JobUnavailable</name>
		</location>
		<location id="id26" x="654" y="-17">
			<name x="637" y="-59">JobSend</name>
		</location>
		<location id="id27" x="288" y="0">
			<name x="256" y="-32">JobCheck</name>
		</location>
		<location id="id28" x="0" y="0">
			<name x="-85" y="-8">Ready</name>
		</location>
		<location id="id29" x="484" y="51">
			<name x="450" y="68">JobAvailable</name>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id29"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<nail x="569" y="-34"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id24"/>
			<label kind="guard" x="773" y="42">FromRobot == true</label>
			<label kind="synchronisation" x="799" y="68">JobToRobot!</label>
			<nail x="841" y="42"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="76" y="59">RobotToJob?</label>
			<label kind="assignment" x="42" y="76">JobSample = RobotSample,
FromRobot = true</label>
			<nail x="119" y="59"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id28"/>
			<label kind="assignment" x="450" y="289">FromQueue = false,
FromRobot = false</label>
			<nail x="1037" y="272"/>
			<nail x="-4" y="280"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id24"/>
			<label kind="guard" x="773" y="-110">FromQueue == true</label>
			<label kind="synchronisation" x="799" y="-93">JobToQueue!</label>
			<nail x="841" y="-68"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="assignment" x="306" y="-68">JobSample.job = false</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id29"/>
			<label kind="assignment" x="289" y="34">JobSample.job = true</label>
			<nail x="391" y="25"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="85" y="-110">QueueToJob?</label>
			<label kind="assignment" x="42" y="-93">JobSample = QueueSample,
FromQueue = true</label>
			<nail x="119" y="-51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

Input = InputSystem();
Brake = BrakeSystem();
Queue = QueueSystem();
Robot = RobotSystem();
Scanner = ScannerSystem();
Job = JobSystem();
// List one or more processes to be composed into a system.
system Robot, Input, Brake, Queue, Scanner, Job;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; ((Input.InitSample) imply Brake.Start)</formula>
			<comment>There exists a path from the input system to the brake system</comment>
		</query>
		<query>
			<formula>A&lt;&gt; Input.SampleSend imply Brake.Brake</formula>
			<comment>When a sample is send to the brake system it must always brake</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (Brake.SampleBrake &lt;= 1000 and Brake.Brake imply Brake.SampleInserted)</formula>
			<comment>If it has taken less than 1000 milliseconds to brake a sample then insert it into the queue</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (Brake.SampleBrake &gt; 1000 and Brake.Brake imply Brake.Error)</formula>
			<comment>If it takes more than 1000 milliseconds to brake a sample then an error has occured and human intervention is required</comment>
		</query>
		<query>
			<formula>A&lt;&gt; Queue.Ready imply Robot.WaitingForSample</formula>
			<comment>There exists a path from the Queue system to the Robot system</comment>
		</query>
		<query>
			<formula>A&lt;&gt; Queue.Ready imply Job.Ready</formula>
			<comment>There exists a path from the queue system to the job system</comment>
		</query>
		<query>
			<formula>A&lt;&gt; Job.JobSent imply Queue.JobReceived</formula>
			<comment>There exists a path from the job system to the queue system</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Robot.SampleSortedFromQueue imply sorted &gt; 0 and Robot.WaitingForSample</formula>
			<comment>See if it is possible to sort samples</comment>
		</query>
		<query>
			<formula>E&lt;&gt; rejected &gt; 0</formula>
			<comment>See if it is possible to reject samples</comment>
		</query>
		<query>
			<formula>A&lt;&gt; Queue.SampleToRobot imply Robot.SamplePicked</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Robot.SamplePicked imply Scanner.SampleReady</formula>
			<comment>Does a path exist from the robot to the scanner system`?</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (Robot.JobWaitingTime &gt; 3000 and Robot.isJobAvailable imply Robot.WaitingForSample)</formula>
			<comment>System doesn't freeze when job system takes longer than 3000 milliseconds</comment>
		</query>
		<query>
			<formula>A&lt;&gt; Robot.JobWaitingTime &lt; 3000 and Robot.isJobAvailable imply (sorted &gt; 0 and Robot.WaitingForSample) or (Queue.SampleReturned)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; ( 1 &gt; 0 )</formula>
			<comment>Test</comment>
		</query>
	</queries>
</nta>
